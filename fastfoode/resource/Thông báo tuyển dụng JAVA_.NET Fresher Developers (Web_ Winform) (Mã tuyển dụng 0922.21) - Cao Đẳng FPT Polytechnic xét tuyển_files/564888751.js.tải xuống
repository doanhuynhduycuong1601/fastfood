var android_phone, android_tablet, apple_ipod, apple_phone, apple_tablet, detectDevice, match, other_blackberry, other_firefox, other_opera, seven_inch, windows_phone, windows_tablet;

apple_phone = /iPhone/i;

apple_ipod = /iPod/i;

apple_tablet = /iPad/i;

android_phone = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i;

android_tablet = /Android/i;

windows_phone = /IEMobile/i;

windows_tablet = /(?=.*\bWindows\b)(?=.*\bARM\b)/i;

other_blackberry = /BlackBerry/i;

other_opera = /Opera Mini/i;

other_firefox = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i;

seven_inch = new RegExp('(?:' + 'Nexus 7' + '|' + 'BNTV250' + '|' + 'Kindle Fire' + '|' + 'Silk' + '|' + 'GT-P1000' + ')', 'i');

// Case-insensitive matching
match = function(regex, userAgent) {
  return regex.test(userAgent);
};

detectDevice = function(userAgent) {
  var platform, ua;
  ua = userAgent;
  this.apple = {
    phone: match(apple_phone, ua),
    ipod: match(apple_ipod, ua),
    tablet: match(apple_tablet, ua),
    device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)
  };
  this.android = {
    phone: match(android_phone, ua),
    tablet: !match(android_phone, ua) && match(android_tablet, ua),
    device: match(android_phone, ua) || match(android_tablet, ua)
  };
  this.windows = {
    phone: match(windows_phone, ua),
    tablet: match(windows_tablet, ua),
    device: match(windows_phone, ua) || match(windows_tablet, ua)
  };
  this.other = {
    blackberry: match(other_blackberry, ua),
    opera: match(other_opera, ua),
    firefox: match(other_firefox, ua),
    device: match(other_blackberry, ua) || match(other_opera, ua) || match(other_firefox, ua)
  };
  this.seven_inch = match(seven_inch, ua);
  this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;
  this.phone = this.apple.phone || this.android.phone || this.windows.phone;
  this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;
  if (this.phone) {
    platform = 'mobile';
  } else if (this.tablet) {
    platform = 'tablet';
  } else {
    platform = 'desktop';
  }
  return {
    platform: platform,
    device: this
  };
};


DeviceType = detectDevice(navigator.userAgent);


getUrlParams = function(search) {
    const hashes = search.slice(search.indexOf('?') + 1).split('&')
    const params = {}
    hashes.map(hash => {
        const [key, val] = hash.split('=')
        params[key] = decodeURIComponent(val)
    })
    return params
}
urlParams = getUrlParams(window.location.href.split("#")[0]);

!(function (window) {

service="//delivery-cloud.cdp.asia/interaction/v2",serviceLog="//delivery-cloud.cdp.asia/interaction/v2",serviceInteraction="//delivery-cloud.cdp.asia/interaction/v2"/**
 * Compiler:
 * path: scripts/roi.coffee
 */

var cdp_delivery, _, _ref, _ref1, _ref2, _ref3, _ref4,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = {};

_.base64 = {
  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
  encode: function(input) {
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output;
    output = '';
    chr1 = void 0;
    chr2 = void 0;
    chr3 = void 0;
    enc1 = void 0;
    enc2 = void 0;
    enc3 = void 0;
    enc4 = void 0;
    i = 0;
    input = _.base64._utf8_encode(input);
    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      enc1 = chr1 >> 2;
      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
      enc4 = chr3 & 63;
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
    }
    return output;
  },
  _utf8_encode: function(string) {
    var c, n, utftext;
    string = string.replace(/\r\n/g, '\n');
    utftext = '';
    n = 0;
    while (n < string.length) {
      c = string.charCodeAt(n);
      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else if (c > 127 && c < 2048) {
        utftext += String.fromCharCode(c >> 6 | 192);
        utftext += String.fromCharCode(c & 63 | 128);
      } else {
        utftext += String.fromCharCode(c >> 12 | 224);
        utftext += String.fromCharCode(c >> 6 & 63 | 128);
        utftext += String.fromCharCode(c & 63 | 128);
      }
      n++;
    }
    return utftext;
  }
};

_.appendScript = function(div, script) {
  var scriptNode, span;
  span = document.createElement('span');
  span.className = 'span-append';
  span.style.display = 'none';
  div.appendChild(span);
  scriptNode = document.createElement('script');
  if ((script != null ? script.text : void 0) != null) {
    scriptNode.text = script.text;
  } else {
    scriptNode.src = script.src;
    scriptNode.async = 1;
  }
  return span.parentNode.replaceChild(scriptNode, span);
};

_.getScriptsFromConversion = function(url, cvid) {
  return false;
  var _this = this;
  var s = document.createElement("script"), el = document.getElementsByTagName("script")[0]; s.async = true;
  s.src = "" + url + "?conversion_id=" + cvid;
  el.parentNode.insertBefore(s, el);
};

_.sha1 = function(str) {
  var A, B, C, D, E, H0, H1, H2, H3, H4, W, blockstart, cvt_hex, i, j, rotate_left, str_len, temp, word_array;
  rotate_left = function(n, s) {
    return (n << s) | (n >>> (32 - s));
  };
  cvt_hex = function(val) {
    var i, v;
    str = "";
    i = void 0;
    v = void 0;
    i = 7;
    while (i >= 0) {
      v = (val >>> (i * 4)) & 0x0f;
      str += v.toString(16);
      i--;
    }
    return str;
  };
  blockstart = void 0;
  i = void 0;
  j = void 0;
  W = [];
  H0 = 0x67452301;
  H1 = 0xefcdab89;
  H2 = 0x98badcfe;
  H3 = 0x10325476;
  H4 = 0xc3d2e1f0;
  A = void 0;
  B = void 0;
  C = void 0;
  D = void 0;
  E = void 0;
  temp = void 0;
  str_len = void 0;
  word_array = [];
  str = unescape(window.encodeURIComponent(str));
  str_len = str.length;
  i = 0;
  while (i < str_len - 3) {
    j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
    word_array.push(j);
    i += 4;
  }
  switch (str_len & 3) {
    case 0:
      i = 0x080000000;
      break;
    case 1:
      i = str.charCodeAt(str_len - 1) << 24 | 0x0800000;
      break;
    case 2:
      i = str.charCodeAt(str_len - 2) << 24 | str.charCodeAt(str_len - 1) << 16 | 0x08000;
      break;
    case 3:
      i = str.charCodeAt(str_len - 3) << 24 | str.charCodeAt(str_len - 2) << 16 | str.charCodeAt(str_len - 1) << 8 | 0x80;
  }
  word_array.push(i);
  while ((word_array.length & 15) !== 14) {
    word_array.push(0);
  }
  word_array.push(str_len >>> 29);
  word_array.push((str_len << 3) & 0x0ffffffff);
  blockstart = 0;
  while (blockstart < word_array.length) {
    i = 0;
    while (i < 16) {
      W[i] = word_array[blockstart + i];
      i++;
    }
    i = 16;
    while (i <= 79) {
      W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      i++;
    }
    A = H0;
    B = H1;
    C = H2;
    D = H3;
    E = H4;
    i = 0;
    while (i <= 19) {
      temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5a827999) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
      i++;
    }
    i = 20;
    while (i <= 39) {
      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
      i++;
    }
    i = 40;
    while (i <= 59) {
      temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8f1bbcdc) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
      i++;
    }
    i = 60;
    while (i <= 79) {
      temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6) & 0x0ffffffff;
      E = D;
      D = C;
      C = rotate_left(B, 30);
      B = A;
      A = temp;
      i++;
    }
    H0 = (H0 + A) & 0x0ffffffff;
    H1 = (H1 + B) & 0x0ffffffff;
    H2 = (H2 + C) & 0x0ffffffff;
    H3 = (H3 + D) & 0x0ffffffff;
    H4 = (H4 + E) & 0x0ffffffff;
    blockstart += 16;
  }
  temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
  return temp.toLowerCase();
};

_.objectKeys = function(obj) {
  var key, keys;
  keys = [];
  for (key in obj) {
    if (!__hasProp.call(obj, key)) continue;
    keys.push(key);
  }
  return keys;
};

_.arrayEach = function(array, iterator) {
  var index, item, _i, _len, _results;
  if (Array.prototype.forEach != null) {
    return Array.prototype.forEach.call(array, iterator);
  }
  _results = [];
  for (index = _i = 0, _len = array.length; _i < _len; index = ++_i) {
    item = array[index];
    _results.push(iterator.call(array, item, index, array));
  }
  return _results;
};

_.isArray = function(obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
};

_.each = function(array, iterator) {
  var keys;
  if (!array) {
    return;
  }
  if (_.isArray(array)) {
    return _.arrayEach(array, iterator);
  } else {
    keys = this.objectKeys(array);
    return _.arrayEach(keys, function(key) {
      return iterator.call(array, array[key], key, array);
    });
  }
};

_.map = function(array, iterator) {
  var results;
  results = [];
  _.each(array, function(item, index) {
    return results.push(iterator.call(array, item, index, array));
  });
  return results;
};

_.filter = function(array, iterator) {
  var results;
  results = [];
  _.each(array, function(item, index) {
    var pass;
    pass = iterator.call(array, item, index, array);
    if (pass) {
      return results.push(item);
    }
  });
  return results;
};

_.extend = function() {
  var key, obj, objs, origin, value, _i, _len;
  origin = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  origin = origin || {};
  for (_i = 0, _len = objs.length; _i < _len; _i++) {
    obj = objs[_i];
    for (key in obj) {
      value = obj[key];
      origin[key] = value;
    }
  }
  return origin;
};

_.nextTick = function(fn) {
  return _.delay(0, fn);
};

_.delay = function(millisecond, fn) {
  var ex;
  try {
    return setTimeout(fn, millisecond);
  } catch (_error) {
    ex = _error;
    return //console.error("error while nextTick", ex.stack, arguments);
  }
};

_.debounce = function(fn, delay) {
  var timer;
  timer = null;
  return function() {
    var args, context;
    context = this;
    args = arguments_;
    clearTimeout(timer);
    return timer = setTimeout(function() {
      return fn.apply(context, args);
    }, delay);
  };
};

_.json = function(url, options, cb) {
  var ex, handler, xhr;
  try {
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }
    handler = function() {
      var ex, json;
      if (xhr.readyState === 4 && xhr.status === 200) {
        json = xhr.responseText;
        try {
          return json = JSON.parse(json);
        } catch (_error) {
          ex = _error;
          return //console.warn(ex);
        } finally {
          cb(json);
        }
      }
    };
    xhr = new XMLHttpRequest;
    xhr.open('GET', url, true);
    xhr.withCredentials = options.credentials === true;
    xhr.onreadystatechange = handler;
    return xhr.send();
  } catch (_error) {
    ex = _error;
  }
};


_.addEventListener = function(elem, event, fn) {
  // elem = if elem is win then win else elem[0] or elem
  if (elem === top) {
    elem = top;
  } else if (elem === win) {
    elem = win;
  } else {
    elem = elem[0] || elem;
  }
  if (elem.addEventListener) {
    elem.addEventListener(event, fn, false);
    return true;
  }
  if (elem.attachEvent) {
    return elem.attachEvent(`on${event}`, fn);
  }
};

_.queue = function(parallelism) {
  var active, all, await, callback, error, noop, notify, pop, popping, q, remaining, slice, started, tasks,
    _this = this;
  noop = function() {};
  slice = [].slice;
  q = void 0;
  tasks = [];
  started = 0;
  active = 0;
  remaining = 0;
  popping = void 0;
  error = null;
  await = noop;
  all = void 0;
  if (!parallelism) {
    parallelism = Infinity;
  }
  pop = function() {
    var a, i, t;
    while (popping = started < tasks.length && active < parallelism) {
      i = started++;
      t = tasks[i];
      a = slice.call(t, 1);
      a.push(callback(i));
      ++active;
      t[0].apply(null, a);
    }
  };
  callback = function(i) {
    return function(r, e) {
      --active;
      if (error != null) {
        return;
      }
      if (e != null) {
        error = e;
        started = remaining = NaN;
        notify();
      } else {
        tasks[i] = r;
        if (--remaining) {
          popping || pop();
        } else {
          notify();
        }
      }
    };
  };
  notify = function() {
    if (error != null) {
      await(error);
    } else if (all) {
      await(error, tasks);
    } else {
      await.apply(null, [error].concat(tasks));
    }
  };
  return q = {
    defer: function() {
      if (!error) {
        tasks.push(arguments);
        ++remaining;
        pop();
      }
      return q;
    },
    await: function(f) {
      await = f;
      all = false;
      if (!remaining) {
        notify();
      }
      return q;
    },
    awaitAll: function(f) {
      await = f;
      all = true;
      if (!remaining) {
        notify();
      }
      return q;
    }
  };
};

let viewableTrackingLogs = {}

function createElementFromHTML(htmlString) {
  var div = document.createElement('div');
  div.innerHTML = htmlString.trim();
  return div.firstChild;
}

function isElementInViewVersion1(element) {
  var elementBoundingBox = element.getBoundingClientRect();
  var elementTopY = elementBoundingBox.top;
  var elementBottomY = elementBoundingBox.top + elementBoundingBox.height;
  return elementTopY >= 0 && elementBottomY <= Math.min(document.documentElement.clientHeight, window.innerHeight || 0);
}

function isElementInView(element, level) {
  if(element.getBoundingClientRect() === undefined){ return false }
  var elementBoundingBox = element.getBoundingClientRect();
  var elementTopY = elementBoundingBox.top;
  var elementBottomY = elementBoundingBox.bottom;
  var isViewable = elementTopY > 0 && elementBottomY - 0.5 <= Math.min(document.documentElement.clientHeight, window.innerHeight || 0);
  if (isViewable) { return isViewable }
  if (level < 1) {
    var isViewableChildContent;
    element.childNodes.forEach(cEle => {
      if (cEle.tagName === "DIV") { isViewableChildContent = isViewableChildContent || isElementInView(cEle, level + 1); }
    });
    return isViewableChildContent;
  } else { return false }
}

function checkWebContentViewability() {
  var elements = document.querySelectorAll(".antsomi-web-content");
  for(var i = 0; i < elements.length; i++) {
    if(isElementInView(elements[i], 0) || isElementInViewVersion1(elements[i])) {
      trackingViewable(elements[i]);
    }
    // else {
    //   console.log("Element " + i + " is not viewable");
    // }
  }
}

function trackingViewable(element) {
  const id = element.getAttribute('id');
  const viewableTrackingUrl = element.getAttribute('viewable-tracking-url');
  if (!viewableTrackingLogs[id]) {
    //console.log('content', id, 'is viewable');
    //console.log('viewableTrackingUrl', viewableTrackingUrl);
    //console.log('viewableTrackingLogs', viewableTrackingLogs);
    if (viewableTrackingUrl && viewableTrackingUrl.length > 0 && viewableTrackingUrl.indexOf('a.cdp.asia') > -1) {
      _.json(viewableTrackingUrl, {
        credentials: true
      }, (res) => {
        //console.log('viewableTracking response', res)
      })
      viewableTrackingLogs[id] = true;
    }
  }
}

function getBlockedStoryIds(cookiePrefix) {
  const decodedCookie = decodeURIComponent(document.cookie);
  const cookies = decodedCookie.split(";");
  let blockedStoryIds = [];
  cookies.forEach(function(cookie) {
    if (cookie && cookie.trim().startsWith(cookiePrefix)) {
      const originCookie = cookie.trim();
      const cookieValue = originCookie.split("=")[1];
      const cookieName = originCookie.split("=")[0];
      if (cookieName && cookieValue === "true") {
        const blockedStoryId = cookieName.replace(cookiePrefix, "");
        blockedStoryIds.push(blockedStoryId);
      }
    }
  })
  return blockedStoryIds;
}

_.addEventListener(window, 'scroll', checkWebContentViewability);

cdp_delivery = (function() {
  var buildUrl, buildDeliveryUrl;

  function cdp_delivery() {
    this.syncInfo = __bind(this.syncInfo, this);
    this.has = Object.prototype.hasOwnProperty;
    this.queueEvents = _.queue();
    this.isSyncInfo = true;
    this.queue = [];
    this.instance = null;
    this.syncInfo();
  }

  cdp_delivery.getInstance = function() {
    if (!this.isSyncInfo) {
      this.instance = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, arguments, function(){});
    }
    return this.instance;
  };

  cdp_delivery.prototype.syncInfo = function(callback) {
    if (callback == null) {
      callback = function() {};
    }
    return this.enqueue();
  };

  cdp_delivery.prototype.push = function(obj) {
    if (typeof obj === 'object') {
      this.queue.push(obj);
      if ((obj != null ? obj.prop_id : void 0) != null) {
        _.getScriptsFromConversion("" + service + "/data-scripts", obj != null ? obj.prop_id : void 0);
      }
      if (this.isSyncInfo) {
        return _.debounce(this.enqueue(), 250);
      }
    }
  };

  cdp_delivery.prototype.enqueue = function() {
    var event, queue, _i, _len, _results;
    queue = this.queue;
    if (window.cdp_delivery_delay_events != null) {
      queue = queue.concat(window.cdp_delivery_delay_events);
    }
    this.queue = [];
    window.cdp_delivery_delay_events = [];
    if (queue.length > 0) {
      _results = [];
      for (_i = 0, _len = queue.length; _i < _len; _i++) {
        event = queue[_i];
        if (event.prop_id == null) {
          continue;
        }
        const blockedStoryIds = getBlockedStoryIds("cdp_blocked_sid_");
        var url = buildUrl("" + serviceLog , event)+"&b_ws_ids="+blockedStoryIds.join(",")+"&format=json";
        _.json(url, {
          credentials: true
        }, (res) => {
          var data, i, len, ref, results;
          data = res;
          this.renderContents(data)
        });

      }
      return _results;
    }
  };

  function setExpireCookie(cookieName, cookieValue, expireTime) {
    try {
      const day = new Date();
      day.setTime(day.getTime() + (expireTime * 1000));
      let expires = "expires="+ day.toUTCString();
      document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
    } catch (error) {
      throw new Error("cdp::setExpireCookie::error:", error);
    }
  }

  function getCookieValue(cookieName) {
    try {
      const name = cookieName + "=";
      const decodedCookie = decodeURIComponent(document.cookie);
      const cookies = decodedCookie.split(";");
      for(let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i] && cookies[i].trim();
        if (cookie.startsWith(name)) {
          return cookie.replace(name, '');
        }
      }
      return null;
    } catch (error) {
      console.log("cdp::getCookieValue::error:", error);
      return null;
    }
  }

  function getTimeByFrequencyCappingConfig(timeUnit) {
    try {
      let currentTime = new Date();
      let endTime, expireSeconds;
      if (timeUnit === "daily") {
        endTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), 23, 59, 59);
      } else if (timeUnit == "hourly") {
        endTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), 59, 59);
      } else if (timeUnit == "weekly") {
        let firstDayOfWeek = 0;
        endTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate() + (7 - currentTime.getDay() - firstDayOfWeek) % 7, 23, 59, 59);
      } else if (timeUnit == "monthly") {
        endTime = new Date(currentTime.getFullYear(), currentTime.getMonth() + 1, 0, 23, 59, 59);
      } else if (timeUnit == "yearly") {
        endTime = new Date(currentTime.getFullYear(), 11, 31, 23, 59, 59);
      } else {
        throw new Error("timeUnit's format is invalid");
      }
      expireSeconds = (endTime.getTime() - currentTime.getTime()) / 1000;
      return expireSeconds;
    } catch (error) {
      console.log("cdp::getTimeByFrequencyCappingConfig::error:", error);
      return 0;
    }
  }

  function checkFrequencyCapping(storyId, frequencyCappingConfig) {
    try {
      if (!frequencyCappingConfig || !storyId) { return false }
      const blockedStoryKey = `cdp_blocked_sid_${storyId}`;
      let cookieValue = getCookieValue(blockedStoryKey);
      const { value, timeUnit } = frequencyCappingConfig || {};
      if (value && timeUnit) {
        let expireTimeSeconds = getTimeByFrequencyCappingConfig(timeUnit);
        if (value > 0) {
          if (!cookieValue) {
            if (value === 1) {
              setExpireCookie(blockedStoryKey, true, expireTimeSeconds);
              return true;
            } else {
              setExpireCookie(blockedStoryKey, 1, expireTimeSeconds);
              return true;
            }
          } else if (cookieValue !== 'true') {
            const nextCookieValue = +cookieValue + 1;
            if (nextCookieValue >= value) {
              setExpireCookie(blockedStoryKey, true, expireTimeSeconds);
              return true;
            } else if (nextCookieValue < value) {
              setExpireCookie(blockedStoryKey, nextCookieValue, expireTimeSeconds);
              return true;
            } else {
              return false;
            }
          }
        } else {
          return false;
        }
      } else {
        return false;
      }
    } catch (error) {
      console.log("cdp::checkFrequencyCapping:error:", error);
      return false;
    }
  }

  function renderEmbeddedContent(data) {
    try {
      var wrapper;
      wrapper = document.querySelector(data.cssSelector);

      if(wrapper && data.content && data.content.length > 0){
        if (data.contentPlacement === 'content_placement_replace') {
          const html = "<style>"+data.css+"</style>"+data.content;
          wrapper.innerHTML = html;
          if (data.isFitContent === 1) {
            wrapper.style.overflow = 'hidden';
          }
        } else if (data.contentPlacement === 'content_placement_insert_before') {
          const parentNode = wrapper.parentNode;
          const insertContent = createElementFromHTML(data.content);
          const insertCss = createElementFromHTML("<style>"+data.css+"</style>");
          parentNode.insertBefore(insertContent, wrapper);
          parentNode.insertBefore(insertCss, wrapper);
          if (data.isFitContent === 1) {
            insertContent.style.height = wrapper.style.height;
            insertContent.style.width = wrapper.style.width;
            insertContent.style.overflow = 'hidden';
          }
        } else if (data.contentPlacement === 'content_placement_insert_after') {
          const parentNode = wrapper.parentNode;
          const nextSibling = wrapper.nextSibling;
          const insertContent = createElementFromHTML(data.content);
          const insertCss = createElementFromHTML("<style>"+data.css+"</style>");
          parentNode.insertBefore(insertContent, nextSibling);
          parentNode.insertBefore(insertCss, nextSibling);
          if (data.isFitContent === 1) {
            insertContent.style.height = wrapper.style.height;
            insertContent.style.width = wrapper.style.width;
            insertContent.style.overflow = 'hidden';
          }
        }

        if(data.javascript != '')
          eval(data.javascript);

        setTimeout(function() {
          checkWebContentViewability();
        }, 2000);
      } else if (data.evalJavascriptBg === true) {
        if(data && data.javascript != '') {
          eval(data.javascript);
        }

        setTimeout(function() {
          checkWebContentViewability();
        }, 2000);
      }
    } catch (error) {
      console.log("cdp::renderEmbeddedContent::error:", error);
    }
  }

  function initWebModal(data) {
    try {
      const { variantId, closeTime } = data || {};
      if (variantId) {
        let modal = document.getElementById(`cdp-web-modal-${data.variantId}`);
        let closeBtn = document.getElementById(`cdp-web-modal-${data.variantId}-close`);

        if (modal && modal.style) {
          modal.style.visibility = 'visible';

          if(data.javascript != '')
            eval(data.javascript);

          setTimeout(function() {
            checkWebContentViewability();
          }, 2000);

          if (closeBtn) {
            closeBtn.onclick = function() {
              modal.style.visibility = 'hidden';
            }
          }

          if (closeTime && closeTime !== 0 && closeTime !== '0') {
            setTimeout(function() {
              modal.style.visibility = 'hidden';
            }, closeTime);
          }

          window.onclick = function(event) {
            if (event.target == modal) {
              modal.style.visibility = 'hidden'
            }
          }
        } else {
          console.log('content modal of', variantId, 'is not found');
        }
      } else {
        console.log('data is invalid', data);
      }
    } catch (error) {
      console.log("cdp::initWebModal::error:", error)
    }
  }

  function initNotificationContent(data) {
    try {
      const { variantId, closeTime } = data || {};
      if (variantId) {
        let notification = document.getElementById(`cdp-web-notification-${variantId}`);
        let closeBtn = document.getElementById(`cdp-web-notification-${variantId}-close`);
        if (notification && notification.style) {
          notification.style.visibility = 'visible';

          if(data.javascript != '')
            eval(data.javascript);

          setTimeout(function() {
            checkWebContentViewability();
          }, 2000);

          if (closeBtn) {
            closeBtn.onclick = function() {
              notification.style.visibility = 'hidden';
            }
          }

          if (closeTime && closeTime !== 0 && closeTime !== '0') {
            setTimeout(function() {
              notification.style.visibility = 'hidden';
            }, closeTime);
          }
        } else {
          console.log('content notification of', variantId, 'is not found');
        }
      } else {
        console.log('data is invalid', data);
      }
    } catch (error) {
      console.log("cdp::initNotificationContent::error:", error);
    }
  }

  function renderDynamicContent(data) {
    try {
      const htmlContent = data.htmlContent;
      if (htmlContent && htmlContent.length > 0) {
        const insertContent = createElementFromHTML(htmlContent);
        document.body.appendChild(insertContent);
        if (data.contentType === 'web_modal') {
          initWebModal(data);
        } else if (data.contentType === 'web_notification') {
          initNotificationContent(data);
        } else {
          console.log('data.contentType is invalid:', data.contentType);
        }
      } else {
        console.log('dynamic html is invalid');
      }
    } catch (error) {
      console.log("cdp::renderDynamicContent::error", error)
    }
  }

  cdp_delivery.prototype.renderContents = function(result) {
    const renderContent = function (data) {
      if (data.contentType === 'web_embedded') {
        renderEmbeddedContent(data);
      } else if (data.contentType === 'web_modal' || data.contentType === 'web_notification') {
        renderDynamicContent(data);
      }
    }

    if(result.status){
      if (result.webContents) {
        (Object.keys(result.webContents)).forEach(function(zoneId){
          var data = result.webContents[zoneId];
          try {
            if (data && data.variantId && data.storyId) {
              if (data.frequencyCapping) {
                checkFrequencyCapping(data.storyId, data.frequencyCapping);
              }

              let delayTime = 0;
              if (data.delayMilis) {
                delayTime = data.delayMilis;
              }
              if (delayTime > 0) {
                const timeoutId = setTimeout(function(){
                  renderContent(data)
                }, delayTime);
              } else {
                renderContent(data)
              }
            }
          } catch (ex) {
            console.log('renderContents error:' + zoneId, ex);
          }
        });
      }
    }
  };

  cdp_delivery.prototype.identity = function(event) {
    var history;
    history = event || {};
    history.ref_url = encodeURIComponent(document.referrer.match(/(^[^#]*)/)[0]);
    history.url = encodeURIComponent(window.location.href.match(/(^[^#]*)/)[0]);
    return this.sendLog(buildUrl("" + serviceLog + "/user-conversions/identity", history));
  };

  cdp_delivery.prototype.pageView = function(event) {
    var history;
    history = event || {};
    //history.custom_params = encodeURIComponent(JSON.stringify(history.custom_params));
    //history.ref_url = encodeURIComponent(document.referrer.match(/(^[^#]*)/)[0]);
    //history.url = encodeURIComponent(window.location.href.match(/(^[^#]*)/)[0]);
    return this.sendLog(buildUrl("" + serviceLog, history));
  };

  buildUrl = function(link, params) {
    var ex, hasParam, key, paramArray, url, value;
    hasParam = link.indexOf('?') > -1;
    paramArray = [];
    for (key in params) {
      value = params[key];
      try {
        if (typeof value !== 'string') {
          value = JSON.stringify(value);
        }
        paramArray.push("" + key + "=" + encodeURIComponent(value));
      } catch (_error) {
        ex = _error;
        //console.warn("[sendlog] params." + key + " is not serializable");
      }
    }

    var cp_elements = document.querySelectorAll('div[data-cdp-cp-id]');
    var campaign_ids = [];
    for(var i = 0; i < cp_elements.length; i++){var ele = cp_elements[i]; campaign_ids.push(ele.dataset['cdpCpId']);}
    paramArray.push("campaign_ids=" + campaign_ids.join(','));

    return url = link + (hasParam ? '&' : '?') + paramArray.join('&');
  };

buildDeliveryUrl = function(link, params) {
    var ex, hasParam, key, paramArray, url, value;
    hasParam = link.indexOf('?') > -1;
    paramArray = [];
    for (key in params) {
      value = params[key];
      try {
        if (typeof value !== 'string') {
          value = JSON.stringify(value);
        }
        paramArray.push("" + key + "=" + encodeURIComponent(value));
      } catch (_error) {
        ex = _error;
        //console.warn("[sendlog] params." + key + " is not serializable");
      }
    }

    var cp_elements = document.querySelectorAll('div[data-cdp-wf-id]');
    var workflow_ids = [];
    for(var i = 0; i < cp_elements.length; i++){var ele = cp_elements[i]; workflow_ids.push(ele.dataset['cdpWfId']);}
    paramArray.push("workflow_ids=" + workflow_ids.join(','));

    return url = link + (hasParam ? '&' : '?') + paramArray.join('&');
  };

  cdp_delivery.prototype.sendLog = function(url, callback) {
    var image;
    if (callback == null) {
      callback = function() {};
    }
    image = new Image(1, 1);
    image.onload = callback;
    return image.src = url;
  };

  cdp_delivery.prototype.globalize = function(obj) {
    var name, _results;
    _results = [];
    for (name in obj) {
      if (obj.hasOwnProperty(name)) {
        _results.push(window[name] = obj[name]);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  cdp_delivery.prototype.setLocalStorage = function(key, value, time) {
    var ex, _ref;
    try {
      return (_ref = this.cookie) != null ? _ref.setItem(key, value, time) : void 0;
    } catch (_error) {
      ex = _error;
    }
  };

  cdp_delivery.prototype.removeLocalStorage = function(key) {
    var _ref;
    try {
      if ((_ref = this.cookie) != null) {
        _ref.removeItem(key);
      }
    } catch (_error) {

    }
    return ex;
  };

  cdp_delivery.prototype.getLocalStorage = function(key) {
    var ex, _ref;
    try {
      return (_ref = this.cookie) != null ? _ref.getItem(key) : void 0;
    } catch (_error) {
      ex = _error;
    }
  };

  cdp_delivery.prototype.getCookieStorage = function(key) {
    var ex, value, _ref, _ref1;
    try {
      value = (_ref = this.cookie) != null ? _ref.getItem(key) : void 0;
      if (((_ref1 = String(value)) != null ? _ref1.length : void 0) < 6) {
        return this.storage.getItem(key);
      }
      return value;
    } catch (_error) {
      ex = _error;
    }
  };

  cdp_delivery.prototype.cookie = {
    getItem: function(sKey) {
      if (!sKey || !this.hasItem(sKey)) {
        return null;
      }
      return unescape(document.cookie.replace(new RegExp("(?:^|.*;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"), "$1"));
    },
    setItem: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
      var sExpires;
      sPath = '/';
      sDomain = "." + (document.domain.replace('www.', ''));
      if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/.test(sKey)) {
        return;
      }
      sExpires = "";
      if (vEnd) {
        switch (typeof vEnd) {
          case "number":
            sExpires = "; max-age=" + vEnd / 1000;
            break;
          case "string":
            sExpires = "; expires=" + vEnd;
            break;
          case "object":
            if (vEnd.hasOwnProperty("toGMTString")) {
              sExpires = "; expires=" + vEnd.toGMTString();
            }
        }
      }
      return document.cookie = escape(sKey) + "=" + escape(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
    },
    removeItem: function(sKey) {
      var oExpDate;
      if (!sKey || !this.hasItem(sKey)) {
        return;
      }
      oExpDate = new Date();
      oExpDate.setDate(oExpDate.getDate() - 1);
      document.cookie = escape(sKey) + "=; expires=" + oExpDate.toGMTString() + "; path=/";
    },
    hasItem: function(sKey) {
      return (new RegExp("(?:^|;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
    }
  };

  cdp_delivery.prototype.storage = {
    getItem: function(key) {
      var data, ex, expire, expired, value;
      data = {};
      try {
        value = JSON.parse(window.localStorage.getItem(key));
      } catch (_error) {
        ex = _error;
        //console.warn("[PROXY] Cannot get " + key);
      }
      expire = window.localStorage.getItem("expire-" + key);
      if (expire === null) {
        expired = false;
      } else {
        expired = Number(expire) < Date.now();
      }
      if (value === '' || value === null) {
        value = JSON.parse(window.localStorage.getItem(key));
      }
      if ((value != null) && !expired) {
        data.value = value;
      }
      data.expire = expire || 0;
      return data;
    },
    setItem: function(key, value, expire) {
      var ex, _ref, _ref1, _ref2;
      try {
        if ((_ref = window.localStorage) != null) {
          _ref.setItem(key, JSON.stringify(value));
        }
        if (expire === null || isNaN(expire)) {
          return (_ref1 = window.localStorage) != null ? _ref1.removeItem("expire-" + key) : void 0;
        } else {
          return (_ref2 = window.localStorage) != null ? _ref2.setItem("expire-" + key, Date.now() + expire) : void 0;
        }
      } catch (_error) {
        ex = _error;
      }
    },
    removeItem: function(key) {
      var actualKey;
      actualKey = "expire-" + key;
      window.localStorage.removeItem(key);
      return window.localStorage.removeItem(actualKey);
    },
    removeExpiredKey: function(date) {
      var actualKey, key, value, _ref, _results;
      _ref = window.localStorage;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        if (/expire\-/.test(key)) {
          if (date > Number(value)) {
            actualKey = key.substr('expire-'.length);
            storage.removeItem(key);
            _results.push(storage.removeItem(actualKey));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    }
  };

  return cdp_delivery;

})();

if (((_ref = window.cdp_delivery) != null ? (_ref1 = _ref[0]) != null ? _ref1.prop_id : void 0 : void 0) != null) {
  window.cdp_delivery_delay_events = window.cdp_delivery;
}

if (((_ref4 = window.cdp_delivery) != null ? _ref4.isSyncInfo : void 0) === void 0) {
  window.cdp_delivery = cdp_delivery.getInstance();
}

})(window);